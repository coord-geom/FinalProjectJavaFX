<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Tab?>
<?import javafx.scene.control.TabPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>


<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="300.0" prefWidth="400.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <TabPane layoutX="27.0" prefHeight="300.0" prefWidth="400.0" tabClosingPolicy="UNAVAILABLE" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <tabs>
          <Tab text="Bubble Sort">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                     <children>
                        <Label layoutX="14.0" layoutY="32.0" prefHeight="81.0" prefWidth="373.0" text="Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="13.0" layoutY="135.0" prefHeight="81.0" prefWidth="373.0" text="However, this sort performs poorly in real life as it has an average and worst-case time complexity of O(n ), where n is the number of items to be sorted. For a large amount of data, other sorting methods would be used." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="286.0" layoutY="157.0" text="2">
                           <font>
                              <Font size="7.0" />
                           </font>
                        </Label>
                     </children>
                  </AnchorPane>
            </content>
          </Tab>
          <Tab text="Insertion Sort">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                     <children>
                        <Label layoutX="14.0" layoutY="20.0" prefHeight="142.0" prefWidth="373.0" text="Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="13.0" layoutY="168.0" prefHeight="81.0" prefWidth="373.0" text="However, this sort performs poorly in real life as it has an average and worst-case time complexity of O(n ), where n is the number of items to be sorted. For a large amount of data, other sorting methods would be used." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="286.0" layoutY="190.0" text="2">
                           <font>
                              <Font size="7.0" />
                           </font>
                        </Label>
                     </children>
                  </AnchorPane>
            </content>
          </Tab>
            <Tab text="Merge Sort">
              <content>
                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                     <children>
                        <Label layoutX="14.0" layoutY="25.0" prefHeight="123.0" prefWidth="373.0" text="Merge sort is an efficient, general-purpose, comparison-based sorting algorithm. Conceptually, a merge sort works as follows: Divide the unsorted list into n sublists, each containing one element (a list of one element is considered sorted). Then, repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="13.0" layoutY="161.0" prefHeight="81.0" prefWidth="373.0" text="This sort is more efficient as it has an average and worst-case performance of O(n log n), compared to bubble and insertion sort. This is because it uses the divide-and-conquer algorithm to perform sorting." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                     </children>
                  </AnchorPane>
              </content>
            </Tab>
            <Tab text="Counting Sort">
              <content>
                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                     <children>
                        <Label layoutX="13.0" layoutY="25.0" prefHeight="123.0" prefWidth="373.0" text="Counting sort is an algorithm for sorting a collection of objects according to keys that are small integers. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                        <Label layoutX="13.0" layoutY="157.0" prefHeight="81.0" prefWidth="373.0" text="This sort is very efficient for smaller cases, and its complexity is O(n+k), where k is the maximum possible value in the list of integers." textAlignment="JUSTIFY" wrapText="true">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Label>
                     </children>
                  </AnchorPane>
              </content>
            </Tab>
        </tabs>
      </TabPane>
   </children>
</AnchorPane>
